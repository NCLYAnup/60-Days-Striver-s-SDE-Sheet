class Solution {
public:
    vector<vector<int>> direction={{1,0},{0,1},{0,-1},{-1,0}};

// handle boundry limits
bool isValidchoicr(int i , int j , int row , int colm){
if (i==row || j==colm || i<0 || j<0)
{
return false;
}

return true;
}
    int orangesRotting(vector<vector<int>>& grid) {
      // row 
int row = grid.size();
int col = grid[0].size();

// queue 
queue<pair<int,int>> q;

// check how many freshorange to be changed to rotton
int freshorange=0;

// find cotton orange and store positon
for (int i = 0; i < row; ++i)
{
    for (int j = 0; j < col; ++j)
    {
        if (grid[i][j]==2)
        {
            q.push({i,j});
        }
        
        
        if (grid[i][j]==1)
        {
            freshorange++;
        }
    }
}

int t =-1;
while(!q.empty()){
        
    
      int xz = q.size();
    
    while(xz--){
    
    pair<int,int> cur = q.front();
    q.pop();

    // check all its four direction
    for(auto x : direction){
        int a = cur.first + x[0];
        int b = cur.second + x[1];

        if(isValidchoicr(a,b,row,col) && grid[a][b]==1 && grid[a][b] !=0){
          
            // push in queue
            q.push({a,b});
            
            // make fresh orange to rotten orange after visit
            grid[a][b] =2;
            
            // every time fresh changed to rotton we decrease the no of freshorange
            freshorange--;
        }
    }
    }
    t++;
 
}

if(freshorange >0){  // means some oranges are remaining 
    return -1;
}

if(t==-1){ // no change so 0 time
    return 0;
}

return t;  
    }
};
